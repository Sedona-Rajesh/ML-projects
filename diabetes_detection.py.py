# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mLVs8EsD2Y5ngu36Yuhp2ZMXMIEsUveq

importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""data collection and analysis

PIMA Diabetes dataset

"""

#loading diabetes dataset to a pandas dataframe
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

#printing the first five rows of the datset
diabetes_dataset.head()

# number of rows and columns in this dataset
diabetes_dataset.shape

# getting the statistical measures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0-->non diabetic

1-->diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

#separating data and labels
X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']
print(X)
print(Y)

"""data standardisation"""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X =standardized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""train test split"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""training the model"""

classifier = svm.SVC(kernel='linear')

#training the support vector machine classifier
classifier.fit(X_train,Y_train)

"""evaluating our model

accuracy score
"""

#accuracy score on the traing data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print("accuracy score of training data :",training_data_accuracy)

#accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print("accuracy score of test data :",test_data_accuracy)

"""making a predictive system"""

input_data = (5,166,72,19,175,25.8,0.587,51)

# convert it to numpy array
input_data_as_numpy_array = np.asarray(input_data)
#reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if(prediction[0]==0):
  print("the person is not diabetic")
else:
  print("the person is diabetic")

